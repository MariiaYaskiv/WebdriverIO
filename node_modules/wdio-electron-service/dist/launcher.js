"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const wdio_chromedriver_service_1 = require("wdio-chromedriver-service");
const utils_1 = require("./utils");
function createChromedriverServiceOptions(options, resolver) {
    const { chromedriver = {} } = options;
    const chromedriverServiceOptions = { ...chromedriver };
    process.env.WDIO_ELECTRON = 'true';
    if (!chromedriverServiceOptions.chromedriverCustomPath) {
        utils_1.log.debug('chromedriverCustomPath not set - looking for electron-chromedriver');
        try {
            const electronChromedriverPath = resolver('electron-chromedriver/chromedriver');
            utils_1.log.debug('electron-chromedriver path found:', electronChromedriverPath);
            chromedriverServiceOptions.chromedriverCustomPath = electronChromedriverPath;
        }
        catch (e) {
            const electronChromedriverNotFoundError = new Error('electron-chromedriver was not found. You need to install it or provide a binary via the chromedriver.chromedriverCustomPath option.');
            utils_1.log.error(electronChromedriverNotFoundError);
            throw electronChromedriverNotFoundError;
        }
    }
    return chromedriverServiceOptions;
}
class ChromeDriverLauncher extends wdio_chromedriver_service_1.launcher {
    constructor(options, capabilities, config, resolver = require.resolve) {
        utils_1.log.debug('launcher received options:', options);
        const isWin = process.platform === 'win32';
        const chromedriverServiceOptions = createChromedriverServiceOptions(options, resolver);
        if (isWin) {
            process.env.WDIO_ELECTRON_NODE_PATH = process.execPath;
            process.env.WDIO_ELECTRON_CHROMEDRIVER_PATH = chromedriverServiceOptions.chromedriverCustomPath;
            chromedriverServiceOptions.chromedriverCustomPath = (0, path_1.join)(__dirname, '..', 'bin', 'chrome-driver.bat');
        }
        utils_1.log.debug('setting chromedriver service options:', chromedriverServiceOptions);
        super(chromedriverServiceOptions, capabilities, config);
    }
}
exports.default = ChromeDriverLauncher;
//# sourceMappingURL=launcher.js.map