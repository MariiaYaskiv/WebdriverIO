{"version":3,"file":"service.js","sourceRoot":"","sources":["../src/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Capabilities, Options, Services } from '@wdio/types';\nimport { Browser } from 'webdriverio';\nimport { isCI } from 'ci-info';\nimport { log } from './utils';\n\nfunction getMacExecutableName(appName: string) {\n  // https://github.com/electron-userland/electron-builder/blob/master/packages/app-builder-lib/src/macPackager.ts#L390\n  if (appName.endsWith(' Helper')) {\n    return appName.replace(' Helper', '');\n  }\n\n  return appName;\n}\n\nfunction getBinaryPath(distPath: string, appName: string) {\n  const SupportedPlatform = {\n    darwin: 'darwin',\n    linux: 'linux',\n    win32: 'win32',\n  };\n  const { platform } = process;\n\n  if (!Object.values(SupportedPlatform).includes(platform)) {\n    throw new Error(`Unsupported platform: ${platform}`);\n  }\n\n  const pathMap = {\n    darwin: `mac/${appName}.app/Contents/MacOS/${getMacExecutableName(appName)}`,\n    linux: `linux-unpacked/${appName}`,\n    win32: `win-unpacked/${appName}.exe`,\n  };\n\n  const electronPath = pathMap[platform as keyof typeof SupportedPlatform];\n\n  return `${distPath}/${electronPath}`;\n}\n\nasync function callApi(bridgePropName: string, args: unknown[], done: (result: unknown) => void) {\n  if (window.wdioElectron === undefined) {\n    throw new Error(`ContextBridge not available for invocation of \"${bridgePropName}\" API`);\n  }\n  if (window.wdioElectron[bridgePropName] === undefined) {\n    throw new Error(`\"${bridgePropName}\" API not found on ContextBridge`);\n  }\n  done(await window.wdioElectron[bridgePropName].invoke(...args));\n}\n\ntype ElectronWorkerOptions = {\n  appPath?: string;\n  appName?: string;\n  binaryPath?: string;\n  customApiBrowserCommand?: string;\n  appArgs?: string[];\n};\ntype ApiCommand = { name: string; bridgeProp: string };\ntype WebDriverClient = Browser<'async'>;\ntype WebdriverClientFunc = (this: WebDriverClient, ...args: unknown[]) => Promise<unknown>;\n\nexport default class ElectronWorkerService implements Services.ServiceInstance {\n  constructor(options: Services.ServiceOption) {\n    const apiCommands = [\n      { name: '', bridgeProp: 'custom' },\n      { name: 'electronApp', bridgeProp: 'app' },\n      { name: 'electronMainProcess', bridgeProp: 'mainProcess' },\n      { name: 'electronBrowserWindow', bridgeProp: 'browserWindow' },\n    ];\n    const {\n      appPath,\n      appName,\n      appArgs,\n      binaryPath,\n      customApiBrowserCommand = 'electronAPI',\n    } = options as ElectronWorkerOptions;\n    const validPathOpts = binaryPath !== undefined || (appPath !== undefined && appName !== undefined);\n\n    if (!validPathOpts) {\n      const invalidPathOptsError = new Error('You must provide appPath and appName values, or a binaryPath value');\n      log.error(invalidPathOptsError);\n      throw invalidPathOptsError;\n    }\n\n    const customCommandCollision = apiCommands.find(\n      (command) => command.name === customApiBrowserCommand,\n    ) as ApiCommand;\n    if (customCommandCollision) {\n      const customCommandCollisionError = new Error(\n        `The command \"${customCommandCollision.name}\" is reserved, please provide a different value for customApiBrowserCommand`,\n      );\n      log.error(customCommandCollisionError);\n      throw customCommandCollisionError;\n    } else {\n      apiCommands[0].name = customApiBrowserCommand;\n    }\n\n    this.options = {\n      appPath,\n      appName,\n      appArgs,\n      binaryPath,\n    };\n    this.apiCommands = apiCommands;\n  }\n\n  public options;\n\n  public apiCommands;\n\n  beforeSession(_config: Omit<Options.Testrunner, 'capabilities'>, capabilities: Capabilities.Capabilities): void {\n    const chromeArgs = [];\n\n    if (isCI) {\n      chromeArgs.push('window-size=1280,800');\n      chromeArgs.push('blink-settings=imagesEnabled=false');\n      chromeArgs.push('enable-automation');\n      chromeArgs.push('disable-infobars');\n      chromeArgs.push('disable-extensions');\n\n      if (process.platform !== 'win32') {\n        chromeArgs.push('no-sandbox');\n        chromeArgs.push('disable-gpu');\n        chromeArgs.push('disable-dev-shm-usage');\n        chromeArgs.push('disable-setuid-sandbox');\n      }\n    }\n\n    const { appPath, appName, appArgs, binaryPath } = this.options;\n\n    if (appArgs) {\n      chromeArgs.push(...appArgs);\n    }\n\n    const chromeOptions = {\n      binary: binaryPath || getBinaryPath(appPath as string, appName as string),\n      args: chromeArgs,\n      windowTypes: ['app', 'webview'],\n    };\n\n    const isMultiremote =\n      typeof capabilities === 'object' &&\n      !Array.isArray(capabilities) &&\n      Object.keys(capabilities).length > 0 &&\n      Object.values(capabilities).every((cap) => typeof cap === 'object');\n    const isElectron = (cap: Capabilities.Capabilities) => cap?.browserName?.toLowerCase() === 'electron';\n\n    if (isMultiremote) {\n      log.debug('setting up multiremote');\n      Object.values(capabilities).forEach((cap: { capabilities: Capabilities.Capabilities }) => {\n        if (isElectron(cap.capabilities)) {\n          cap.capabilities.browserName = 'chrome';\n          cap.capabilities['goog:chromeOptions'] = chromeOptions;\n        }\n      });\n    } else {\n      capabilities.browserName = 'chrome';\n      capabilities['goog:chromeOptions'] = chromeOptions;\n    }\n\n    log.debug('setting browser capabilities', capabilities);\n  }\n\n  before(_capabilities: Capabilities.Capabilities, _specs: string[], browser: WebDriverClient): void {\n    this.apiCommands.forEach(({ name, bridgeProp }) => {\n      log.debug('adding api command for ', name);\n      browser.addCommand(name, async (...args: unknown[]) => {\n        try {\n          return await (browser.executeAsync as WebdriverClientFunc)(callApi, bridgeProp, args);\n        } catch (e) {\n          throw new Error(`${name} error: ${(e as Error).message}`);\n        }\n      });\n    });\n  }\n}\n"]}