{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../src/launcher.ts"],"names":[],"mappings":";;AAAA,+BAA4B;AAE5B,yEAAgH;AAChH,mCAA8B;AAU9B,SAAS,gCAAgC,CACvC,OAAoC,EACpC,QAA+B;IAE/B,MAAM,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC;IACtC,MAAM,0BAA0B,GAAG,EAAE,GAAG,YAAY,EAAE,CAAC;IAEvD,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC;IAEnC,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,EAAE;QACtD,WAAG,CAAC,KAAK,CAAC,oEAAoE,CAAC,CAAC;QAChF,IAAI;YACF,MAAM,wBAAwB,GAAG,QAAQ,CAAC,oCAAoC,CAAC,CAAC;YAChF,WAAG,CAAC,KAAK,CAAC,mCAAmC,EAAE,wBAAwB,CAAC,CAAC;YACzE,0BAA0B,CAAC,sBAAsB,GAAG,wBAAwB,CAAC;SAC9E;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,iCAAiC,GAAG,IAAI,KAAK,CACjD,qIAAqI,CACtI,CAAC;YACF,WAAG,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;YAC7C,MAAM,iCAAiC,CAAC;SACzC;KACF;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;AAED,MAAqB,oBAAqB,SAAQ,oCAA2B;IAC3E,YACE,OAAoC,EACpC,YAAuC,EACvC,MAAkB,EAClB,QAAQ,GAAG,OAAO,CAAC,OAAO;QAE1B,WAAG,CAAC,KAAK,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC;QAC3C,MAAM,0BAA0B,GAAG,gCAAgC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEvF,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,OAAO,CAAC,QAAQ,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,0BAA0B,CAAC,sBAAsB,CAAC;YAChG,0BAA0B,CAAC,sBAAsB,GAAG,IAAA,WAAI,EAAC,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAAC;SACvG;QAED,WAAG,CAAC,KAAK,CAAC,uCAAuC,EAAE,0BAA0B,CAAC,CAAC;QAC/E,KAAK,CAAC,0BAA0B,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAC;CACF;AApBD,uCAoBC","sourcesContent":["import { join } from 'path';\nimport { Capabilities } from '@wdio/types';\nimport { launcher as ChromedriverServiceLauncher, ChromedriverServiceOptions } from 'wdio-chromedriver-service';\nimport { log } from './utils';\n\ntype WdioConfig = {\n  [key: string]: unknown;\n};\n\ntype ElectronLauncherServiceOpts = {\n  chromedriver?: ChromedriverServiceOptions;\n};\n\nfunction createChromedriverServiceOptions(\n  options: ElectronLauncherServiceOpts,\n  resolver: NodeJS.RequireResolve,\n): ChromedriverServiceOptions {\n  const { chromedriver = {} } = options;\n  const chromedriverServiceOptions = { ...chromedriver };\n\n  process.env.WDIO_ELECTRON = 'true';\n\n  if (!chromedriverServiceOptions.chromedriverCustomPath) {\n    log.debug('chromedriverCustomPath not set - looking for electron-chromedriver');\n    try {\n      const electronChromedriverPath = resolver('electron-chromedriver/chromedriver');\n      log.debug('electron-chromedriver path found:', electronChromedriverPath);\n      chromedriverServiceOptions.chromedriverCustomPath = electronChromedriverPath;\n    } catch (e) {\n      const electronChromedriverNotFoundError = new Error(\n        'electron-chromedriver was not found. You need to install it or provide a binary via the chromedriver.chromedriverCustomPath option.',\n      );\n      log.error(electronChromedriverNotFoundError);\n      throw electronChromedriverNotFoundError;\n    }\n  }\n\n  return chromedriverServiceOptions;\n}\n\nexport default class ChromeDriverLauncher extends ChromedriverServiceLauncher {\n  constructor(\n    options: ElectronLauncherServiceOpts,\n    capabilities: Capabilities.Capabilities,\n    config: WdioConfig,\n    resolver = require.resolve,\n  ) {\n    log.debug('launcher received options:', options);\n    const isWin = process.platform === 'win32';\n    const chromedriverServiceOptions = createChromedriverServiceOptions(options, resolver);\n\n    if (isWin) {\n      process.env.WDIO_ELECTRON_NODE_PATH = process.execPath;\n      process.env.WDIO_ELECTRON_CHROMEDRIVER_PATH = chromedriverServiceOptions.chromedriverCustomPath;\n      chromedriverServiceOptions.chromedriverCustomPath = join(__dirname, '..', 'bin', 'chrome-driver.bat');\n    }\n\n    log.debug('setting chromedriver service options:', chromedriverServiceOptions);\n    super(chromedriverServiceOptions, capabilities, config);\n  }\n}\n"]}